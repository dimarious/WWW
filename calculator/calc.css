body{
    background-color: aquamarine;
    user-select: none;/*что бы случайно не выделеть кнопки*/

}
.container {
    display: grid;/*display Определяет элемент как контейнер сетки и устанавливает новый контекст форматирования сетки для его содержимого.grid - генерирует блочную сетку*/
    grid-template-columns: 1fr 1fr 1fr 1fr;/*4 колонки */
    grid-gap: 4px;/*промежуток между ячейками*/
    background-color: #212121;
    padding: 4px;/*позволяет задать величину поля сразу для всех сторон элемента или определить ее только для указанных сторон.*/
    border-radius: 5px;
    max-width: 360px;/*предназначено для предотвращения увеличения ширины элемента выше заданного значения.*/

}
.item {/*свойсва кнопок*/
    background-color: cornflowerblue;
    color: black;
    padding: 20px;
    display: flex;/*У каждого div есть свойство display: block. Поэтому каждый блок занимает всю ширину строки. Чтобы начать работать с CSS Flexbox, нужно сделать контейнер flex-контейнером.*/
    justify-content: center;/*определяет, как браузер распределяет пространство вокруг флекс-элементов вдоль главной оси контейнера.*/
    font-size: 22px;
    cursor: pointer;
    font-weight: bold;
}
form {
    max-width: 100%;
}
input {
    width: 100%;
    height: 60px;
    border: none;
    font-size: 30px;
    outline: none;
    text-align: right;
}
.input {/*свойства ячейки ввода*/
    grid-column: 1/-1;/*растягивает ячейку на всю ширину*/
    padding: 0;/*убирает рамку внутри ячейки ввода*/
}
.clean {/*свойства кнопки С*/
    grid-column: 1/3;/*растягивает на 2 ячейки*/
    background-color: blue;
}
.back{/*свойства кнопки backspace*/
    grid-column: 3/-1;
}
.equal{/*свойства кнопки =*/
    grid-column: 4;/*номер колонки размещения*/
    grid-row: 6/8;/*растягивает кнопку в высоту*/
    background-color: bisque;
}
.zero {
    grid-column: 1/3;/*растягивает кнопку в ширину*/
}
